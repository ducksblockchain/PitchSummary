{"version":3,"sources":["logo.png","components/ConnectButton.js","components/4_NavBar.js","components/1_PitchSummary.js","components/2_PitchPage.js","components/3_GovernanceGuide.js","components/Z1_TimeDisplay.js","components/Z2_BidButtonBoard.js","components/Z3_ArtDisplay.js","components/Z4_VideoDisplay.js","components/Z5_MintLink.js","components/Auction.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ConnectButton","props","_useState","useState","_useState2","Object","slicedToArray","setErrorMessage","_useState3","_useState4","defaultAccount","setDefaultAccount","_useState5","_useState6","userBalance","setUserBalance","_useState7","_useState8","accountChangeHandler","newAccount","getUserBalance","address","window","ethereum","request","method","params","then","balance","ethers","utils","formatEther","tokenBalance","toString","replace","console","log","react_default","a","createElement","className","onClick","isMetaMask","result","Navbar","href","target","rel","Component","signMessage","_ref2","asyncToGenerator","regenerator_default","mark","_callee","_ref","setError","message","provider","signer","signature","wrap","_context","prev","next","Error","send","providers","Web3Provider","getSigner","sent","getAddress","abrupt","t0","stop","_x","apply","this","arguments","PitchSummary","signatures","setSignatures","useEffect","localStorage","getItem","clear","setItem","handleSign","_ref3","_callee2","sig","_context2","account","concat","toConsumableArray","alert","value","max","PitchPage","GovernanceGuide","TimeDisplay","BidButtonBoard","ArtDisplay","VideoDisplay","MintLink","Auction","Z1_TimeDisplay","Z2_BidButtonBoard","Z3_ArtDisplay","Z4_VideoDisplay","Z5_MintLink","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getVote","state","smtfaucet","methods","from","loadBlockchainData","web3","Web3","currentProvider","eth","getAccounts","accounts","setState","net","getId","networkId","networkData","SMTFaucet","networks","Contract","abi","_this2","_4_NavBar","role","src","logo","style","width","alt","components_ConnectButton","_1_PitchSummary","_2_PitchPage","_3_GovernanceGuide","components_Auction","event","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"w2jFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yYCwDzBC,EApDO,SAACC,GAAU,IAAAC,EAESC,mBAAS,MAFlBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEVK,GAFUH,EAAA,GAAAA,EAAA,IAAAI,EAGaL,mBAAS,MAHtBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGxBE,EAHwBD,EAAA,GAGRE,EAHQF,EAAA,GAAAG,EAIOT,mBAAS,MAJhBU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAIxBE,EAJwBD,EAAA,GAIXE,EAJWF,EAAA,GAAAG,EAKab,mBAAS,MALtBc,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAkBzBE,GAlByBD,EAAA,GAAAA,EAAA,GAkBF,SAACE,GAC5BR,EAAkBQ,GAClBC,EAAeD,KAGXC,EAAiB,SAACC,GACtBC,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,iBAAkBC,OAAQ,CAACL,EAAS,YACrEM,KAAK,SAAAC,GACFb,EAAgCc,SAAOC,MAAMC,YAAY9B,EAAM+B,cAU1DC,WAAWC,QAAQ,wBAAyB,MATjDC,QAAQC,IAAIR,MAYlB,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,sBAAc7B,IAEhB2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,sBAAczB,IAEduB,EAAAC,EAAAC,cAAA,UAAQE,QAxCa,WACvBnB,OAAOC,UAAYD,OAAOC,SAASmB,WACrCpB,OAAOC,SAASC,QAAQ,CAACC,OAAQ,wBAChCE,KAAK,SAAAgB,GACJzB,EAAqByB,EAAO,MAG9BpC,EAAgB,sBAiCZ,oBC9BKqC,mLAfX,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kEACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,sCACVK,KAAK,oCACLC,OAAO,SACPC,IAAI,uBAJN,mBALaC,sBCEfC,EAAW,eAAAC,EAAA7C,OAAA8C,EAAA,EAAA9C,CAAA+C,EAAAd,EAAAe,KAAG,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAvC,EAAA,OAAA+B,EAAAd,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAASR,EAATD,EAASC,SAAUC,EAAnBF,EAAmBE,QAAnBK,EAAAC,KAAA,EAEhB5B,QAAQC,IAAI,CAAEqB,YACTnC,OAAOC,SAHI,CAAAuC,EAAAE,KAAA,cAIR,IAAIC,MAAM,8CAJF,cAAAH,EAAAE,KAAA,EAMV1C,OAAOC,SAAS2C,KAAK,uBANX,cAOVR,EAAW,IAAI7B,SAAOsC,UAAUC,aAAa9C,OAAOC,UACpDoC,EAASD,EAASW,YARRP,EAAAE,KAAA,GASQL,EAAOV,YAAYQ,GAT3B,eASVG,EATUE,EAAAQ,KAAAR,EAAAE,KAAA,GAUML,EAAOY,aAVb,eAUVlD,EAVUyC,EAAAQ,KAWhBnC,QAAQC,IAAIwB,GAXIE,EAAAU,OAAA,SAaT,CACLf,UACAG,YACAvC,YAhBc,QAAAyC,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,SAmBhBN,EAASM,EAAAW,GAAIhB,SAnBG,yBAAAK,EAAAY,SAAApB,EAAA,kBAAH,gBAAAqB,GAAA,OAAAzB,EAAA0B,MAAAC,KAAAC,YAAA,GAqEFC,EA9CM,SAAC9E,GAAU,IAAAC,EACMC,mBAAS,IADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvB8E,EADuB5E,EAAA,GACX6E,EADW7E,EAAA,GAAAI,EAEJL,qBAFIM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEhBgD,GAFgB/C,EAAA,GAAAA,EAAA,IAAAG,EAGET,qBAHFU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAK9BqE,oBAAU,WACJC,aAAaC,QAAQ,OAAS,MAChCD,aAAaE,QACbF,aAAaG,QAAQ,MAAO,MAIhC,IAAMC,EAAU,eAAAC,EAAAnF,OAAA8C,EAAA,EAAA9C,CAAA+C,EAAAd,EAAAe,KAAG,SAAAoC,IAAA,IAAAC,EAAA,OAAAtC,EAAAd,EAAAuB,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,UAC0B,MAAvCmB,aAAaC,QAAQnF,EAAM2F,SADd,CAAAD,EAAA3B,KAAA,eAEfR,IAFemC,EAAA3B,KAAA,EAGGf,EAAY,CAC5BO,WACAC,QAAS,qCALI,QAGTiC,EAHSC,EAAArB,QAQbW,EAAa,GAAAY,OAAAxF,OAAAyF,EAAA,EAAAzF,CAAK2E,GAAL,CAAiBU,KAC9BP,aAAaG,QAAQ,OAAQH,aAAaC,QAAQ,SAAUvD,SAAOC,MAAMC,YAAY9B,EAAM+B,eAC3FmD,aAAaG,QAAQrF,EAAM2F,SAAS,IAVvBD,EAAA3B,KAAA,eAaf1C,OAAOyE,MAAM,qBAbE,wBAAAJ,EAAAjB,SAAAe,MAAH,yBAAAD,EAAAZ,MAAAC,KAAAC,YAAA,GAsBhB,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,QAAQC,IAAI+C,aAAaC,QAAQ,UAAxD,SACA/C,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAO8C,EAAWtF,EAAM+B,gBAAzC,YACAK,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAM0C,aAAaG,QAAQ,OAAQH,aAAaC,QAAQ,SAAUvD,SAAOC,MAAMC,YAAY9B,EAAM+B,iBAAlH,OACAK,EAAAC,EAAAC,cAAA,YAAUyD,OAAQb,aAAaC,QAAQ,OAAQa,IAAK,MACpD5D,EAAAC,EAAAC,cAAA,qBAA6B4C,aAAaC,QAAQ,QAX3CnD,WAAWC,QAAQ,wBAAyB,KAWnD,gBC1DSgE,EARG,WAChB,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,0BCKS4D,EARS,WACtB,OACE9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,gCCKS6D,EARK,WAClB,OACE/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,4BCKS8D,EARQ,WACrB,OACEhE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,4BCKS+D,EARI,WACjB,OACEjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,2BCKSgE,EARM,WACnB,OACElE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,2BCKSiE,EARE,WACf,OACEnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,yBCkBSkE,mLAbX,OACEpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACmE,EAAD,MACArE,EAAAC,EAAAC,cAACoE,EAAD,MACAtE,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAACsE,EAAD,MACAxE,EAAAC,EAAAC,cAACuE,EAAD,cAVc9D,+BCgFP+D,cAlDb,SAAAA,EAAY9G,GAAO,IAAA+G,EAAA,OAAA3G,OAAA4G,EAAA,EAAA5G,CAAAwE,KAAAkC,IACjBC,EAAA3G,OAAA6G,EAAA,EAAA7G,CAAAwE,KAAAxE,OAAA8G,EAAA,EAAA9G,CAAA0G,GAAAK,KAAAvC,KAAM5E,KAORoH,QAAU,WACRL,EAAKM,MAAMC,UAAUC,QAAQtD,OAAOA,KAAK,CAAEuD,KAAMT,EAAKM,MAAM1B,WAP5DoB,EAAKM,MAAQ,CACX1B,QAAS,GACT5D,aAAc,KAJCgF,4MArBXnC,KAAK6C,8RAIPpG,OAAOC,iCACHoG,EAAO,IAAIC,IAAKtG,OAAOqG,KAAKE,0BAEXF,EAAKG,IAAIC,4BAA1BC,SACNnD,KAAKoD,SAAS,CAAErC,QAASoC,EAAS,KAClC7F,QAAQC,IAAIyC,KAAKyC,MAAM1B,kBACC+B,EAAKG,IAAII,IAAIC,eAA/BC,UACAC,EAAcC,EAAUC,SAASH,MAE/Bb,EAAY,IAAII,EAAKG,IAAIU,SAASF,EAAUG,IAAKJ,EAAYhH,SACnEwD,KAAKoD,SAAS,CAAEV,uCAGlBjG,OAAOyE,MAAM,sKAgBR,IAAA2C,EAAA7D,KACP,OACExC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoG,EAAD,MACAtG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMqG,KAAK,OAAOpG,UAAU,gCAC1BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,OAAKsG,IAAKC,IAAMC,MAAO,CAAEC,MAAO,OAASxG,UAAU,WAAWyG,IAAI,SACpE5G,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,UAAMV,SAAOC,MAAMC,YAAY8C,KAAKyC,MAAMtF,eAC1CK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAC2G,EAAD,CAAelH,aAAc6C,KAAKyC,MAAMtF,gBAE1CK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC4G,EAAD,CAAcvD,QAASf,KAAKyC,MAAM1B,QAAS5D,aAAc6C,KAAKyC,MAAMtF,gBAEtEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAC6G,EAAD,OAEF/G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC8G,EAAD,OAEFhH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAC+G,EAAD,MACAjH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,SAAC8G,GAChBb,EAAKrB,YADP,sBA7DArE,aCFEwG,QACW,cAA7BlI,OAAOmI,SAASC,UAEe,UAA7BpI,OAAOmI,SAASC,UAEhBpI,OAAOmI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxH,EAAAC,EAAAC,cAACuH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxI,KAAK,SAAAyI,GACjCA,EAAaC","file":"static/js/main.55ef1fef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7934b5b6.png\";","import React, {useState} from 'react';\r\nimport Web3 from 'web3';\r\nimport {ethers} from 'ethers';\r\n\r\nconst ConnectButton = (props) => {\r\n\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [defaultAccount, setDefaultAccount] = useState(null);\r\n  const [userBalance, setUserBalance] = useState(null);\r\n  const [connButtonText, setConnButtonText] = useState(null);\r\n\r\n  const connectWalletHandler = () => {\r\n    if (window.ethereum && window.ethereum.isMetaMask) {\r\n      window.ethereum.request({method: 'eth_requestAccounts'})\r\n      .then(result => {\r\n        accountChangeHandler(result[0]);\r\n      })\r\n    } else {\r\n      setErrorMessage('Install MetaMask');\r\n    }\r\n  }\r\n\r\n  const accountChangeHandler = (newAccount) => {\r\n    setDefaultAccount(newAccount);\r\n    getUserBalance(newAccount);\r\n  }\r\n\r\n  const getUserBalance = (address) => {\r\n    window.ethereum.request({ method: 'eth_getBalance', params: [address, 'latest']})\r\n    .then(balance => {\r\n        setUserBalance(numberWithCommas(ethers.utils.formatEther(props.tokenBalance)));\r\n        console.log(balance);\r\n    })\r\n  }\r\n\r\n  const enableEthereum = () => {\r\n    window.ethereum.request({ method: 'eth_requestAccount' })\r\n  }\r\n\r\n  function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  return (\r\n    <div className='connectButton'>\r\n        <div className='accountDisplay'>\r\n          <h3>Address: {defaultAccount}</h3>\r\n        </div>\r\n        <div className='balanceDisplay'>\r\n          <h3>Balance: {userBalance}</h3>\r\n        </div>\r\n          <button onClick={connectWalletHandler}>Connect Wallet</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ConnectButton;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"https://www.oregonblockchain.org/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          OBG DAO\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport Web3 from 'web3';\r\nimport { useState, useEffect } from 'react';\r\nimport {ethers} from 'ethers';\r\n\r\nconst signMessage = async ({ setError, message }) => {\r\n  try {\r\n    console.log({ message });\r\n    if (!window.ethereum)\r\n      throw new Error(\"No crypto wallet found. Please install it.\");\r\n\r\n    await window.ethereum.send(\"eth_requestAccounts\");\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const signature = await signer.signMessage(message);\r\n    const address = await signer.getAddress();\r\n    console.log(signature);\r\n\r\n    return {\r\n      message,\r\n      signature,\r\n      address\r\n    };\r\n  } catch (err) {\r\n    setError(err.message);\r\n  }\r\n};\r\n\r\nconst PitchSummary = (props) => {\r\n  const [signatures, setSignatures] = useState([]);\r\n  const [error, setError] = useState();\r\n  const [yesVotes, setYesVotes] = useState();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem('yes') > 2000000) {\r\n      localStorage.clear();\r\n      localStorage.setItem('yes', 0);\r\n    }\r\n  });\r\n\r\n  const handleSign = async () => {\r\n    if (localStorage.getItem(props.account) == null) {\r\n      setError();\r\n      const sig = await signMessage({\r\n        setError,\r\n        message: \"you are using your coins to vote\"\r\n      });\r\n      if (sig) {\r\n        setSignatures([...signatures, sig]);\r\n        localStorage.setItem('yes', +localStorage.getItem('yes') + +ethers.utils.formatEther(props.tokenBalance))\r\n        localStorage.setItem(props.account, true);\r\n      }\r\n    } else {\r\n      window.alert(\"You already voted\");\r\n    }\r\n  };\r\n\r\n  function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n\r\n  return(\r\n    <div className=\"pitchsummary text-center\">\r\n      <h2>Pitch summary</h2>\r\n      <button onClick={() => console.log(localStorage.getItem('yes'))}>Hello</button>\r\n      <button onClick={() => {handleSign(props.tokenBalance)}}>Vote yes</button>\r\n      <button onClick={() => localStorage.setItem('yes', +localStorage.getItem('yes') + +ethers.utils.formatEther(props.tokenBalance))}>Bye</button>\r\n      <progress value={+localStorage.getItem('yes')} max={3000000} />\r\n      <h2>vote: {numberWithCommas(+localStorage.getItem('yes'))}/3,000,000</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PitchSummary;\r\n","import React from 'react';\r\nimport Web3 from 'web3';\r\n\r\nconst PitchPage = () => {\r\n  return(\r\n    <div className=\"pitchpage text-center\">\r\n      <h2>Pitch page</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PitchPage;\r\n","import React from 'react';\r\nimport Web3 from 'web3';\r\n\r\nconst GovernanceGuide = () => {\r\n  return(\r\n    <div className=\"governanceguide text-center\">\r\n      <h2>Governance Guide</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GovernanceGuide;\r\n","import React from 'react';\r\nimport Web3 from 'web3';\r\n\r\nconst TimeDisplay = () => {\r\n  return(\r\n    <div className=\"timedisplay text-center\">\r\n      <h2>Time Display</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeDisplay;\r\n","import React from 'react';\r\nimport Web3 from 'web3';\r\n\r\nconst BidButtonBoard = () => {\r\n  return(\r\n    <div className=\"bidbuttonboard text-center\">\r\n      <h2>Button Board</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BidButtonBoard;\r\n","import React from 'react';\r\nimport Web3 from 'web3';\r\n\r\nconst ArtDisplay = () => {\r\n  return(\r\n    <div className=\"artdisplay text-center\">\r\n      <h2>Art Display</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ArtDisplay;\r\n","import React from 'react';\r\nimport Web3 from 'web3';\r\n\r\nconst VideoDisplay = () => {\r\n  return(\r\n    <div className=\"videodisplay text-center\">\r\n      <h2>Art Display</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoDisplay;\r\n","import React from 'react';\r\nimport Web3 from 'web3';\r\n\r\nconst MintLink = () => {\r\n  return(\r\n    <div className=\"mintlink text-center\">\r\n      <h2>Mint Link</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MintLink;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TimeDisplay from './Z1_TimeDisplay.js';\r\nimport BidButtonBoard from './Z2_BidButtonBoard.js';\r\nimport ArtDisplay from './Z3_ArtDisplay.js';\r\nimport VideoDisplay from './Z4_VideoDisplay.js';\r\nimport MintLink from './Z5_MintLink.js';\r\n\r\nclass Auction extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"auction text-center\">\r\n        <h1>Auction House</h1>\r\n        <TimeDisplay />\r\n        <BidButtonBoard />\r\n        <ArtDisplay />\r\n        <VideoDisplay />\r\n        <MintLink />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Auction;\r\n","import React, { Component } from 'react';\r\nimport logo from '../logo.png';\r\nimport './App.css';\r\nimport Web3 from 'web3';\r\nimport ConnectButton from './ConnectButton.js';\r\nimport Navbar from './4_NavBar.js';\r\nimport PitchSummary from './1_PitchSummary.js';\r\nimport PitchPage from './2_PitchPage.js';\r\nimport GovernanceGuide from './3_GovernanceGuide.js';\r\nimport Auction from './Auction.js';\r\nimport Token from '../abis/Token.json';\r\nimport SMTFaucet from '../abis/SMTFaucet.json';\r\nimport {ethers} from 'ethers';\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    if (window.ethereum) {\r\n      const web3 = new Web3(window.web3.currentProvider);\r\n      //Load account\r\n      const accounts = await web3.eth.getAccounts()\r\n      this.setState({ account: accounts[0] })\r\n      console.log(this.state.account)\r\n      const networkId = await web3.eth.net.getId()\r\n      const networkData = SMTFaucet.networks[networkId]\r\n      if(networkData) {\r\n        const smtfaucet = new web3.eth.Contract(SMTFaucet.abi, networkData.address)\r\n        this.setState({ smtfaucet })\r\n      }\r\n    } else {\r\n      window.alert(\"not connected\")\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      tokenBalance: '0'\r\n    }\r\n  }\r\n\r\n  getVote = () => {\r\n    this.state.smtfaucet.methods.send().send({ from: this.state.account });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                  <img src={logo} style={{ width: '50%' }} className=\"App-logo\" alt=\"logo\" />\r\n                <h1>OBG DAO Starter Kit</h1>\r\n                <h2>{ ethers.utils.formatEther(this.state.tokenBalance) }</h2>\r\n                <div className='connectbutton'>\r\n                  <ConnectButton tokenBalance={this.state.tokenBalance} />\r\n                </div>\r\n                <div className='pitchsumwidget'>\r\n                  <PitchSummary account={this.state.account} tokenBalance={this.state.tokenBalance} />\r\n                </div>\r\n                <div className='pitchpagewidget'>\r\n                  <PitchPage />\r\n                </div>\r\n                <div className='govguidewidget'>\r\n                  <GovernanceGuide />\r\n                </div>\r\n                <div className='auctionwidget'>\r\n                  <Auction />\r\n                  <button onClick={(event) => {\r\n                    this.getVote()\r\n                  }}>Hello</button>\r\n                </div>\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}